import java.util.ArrayList;

public class Main {
    // this is the computer
    //or  there should be computer(RAm r, ..... )

    public static void main(String[] args) {
        Computer mycomputer = new Computer();
    }

    }

interface MemoryCard{
    byte[] get(int addr, int size);
    int set (byte[] data, int addr);
}

class RAM implements MemoryCard{
    
    byte[] memory= new byte[1000];

    //I initially gave our pc the capacity of 1000

    public byte[] get(int addr,int size){

        int i=size;
        byte[] requested = new byte[size];
        for(i=0; i<size ;i++){
            requested[i] = memory[addr];
            addr++;
        }
        return requested;

    }
    public int set(byte[] data, int addr){
        return addr;
        //bu kod boşşş
    }

 
}
class MemoryCardAdapter{
    private MemoryCard memoryCard;
    private int addr;
    private int size;
    private byte[] data;

    public void setMem(byte[] data, int addr) {
        this.addr = addr;
        this.data = data;
        memoryCard.set(data, addr);
        //buraya notify gelmeli galiba
    }

    public MemoryCardAdapter(MemoryCard memoryCard) {
        this.memoryCard = memoryCard;
    }
    public byte[] getMem(int addr, int size) {
        this.addr = addr;
        this.size = size;
        byte[] data = memoryCard.get(addr, size);
        return data;
    }
}

interface CommunicationCard{

    byte[] data= "abc".getBytes();
     public byte[] getCom(int size);
     public int setCom(byte[] b);
}


class Ethernet {
    private ArrayList<Byte[]> dataList = new ArrayList<>();
    public Byte[] read(int size) {
        // Simulate reading data from the ETHERNET card
        Byte[] solution = null;
        for(Byte[] dataSet: dataList){
            if(dataSet.length == size){
                solution = dataSet;
            }
        }
        // Logic to read data
        if(solution != null){
            Byte[] a = solution;
            dataList.remove(solution);
            return a;
        }else{
            return null;
        }
    }

    public int write(Byte[] data) {
        // Simulate writing data to the ETHERNET card
        dataList.add(data);
        // Logic to write data
        return data.length; // Return the size as an indication of success
    }
}


class EthernetAdapter implements CommunicationCard{
    private final Ethernet communicationCard;

    public EthernetAdapter(Ethernet communicationCard) {
        this.communicationCard = communicationCard;
    }
    @Override
    public byte[] getCom(int size) {
        Byte[] data = communicationCard.read(size);
        //Convert Byte[] to byte[]
        byte[] byteData = new byte[data.length];
        for (int i = 0; i < data.length; i++){
            byteData[i] = data[i];
        }
        return byteData;
    }

    @Override
    public int setCom(byte[] data) {
        // Convert byte[] to Byte[]
        Byte[] byteData = new Byte[data.length];
        for (int i = 0; i < data.length; i++) {
            byteData[i] = data[i];
        }
        return communicationCard.write(byteData);
    }
}


class TokenAdapter implements CommunicationCard{
    private final TokenRing communicationCard;
    public TokenAdapter(TokenRing communicationCard){
        this.communicationCard = communicationCard;
    }

    @Override
    public byte[] getCom(int size) {
        int[] data = communicationCard.receive(size);
        //Convert int[] to byte[]
        byte[] byteData = new byte[data.length];
        for(int i = 0; i < data.length; i++){
            byteData[i] = (byte) data[i];
        }
        return byteData;
    }

    @Override
    public int setCom(byte[] data) {
        //Convert byte[] to int[]
        int[] intData = new int[data.length];
        for(int i = 0; i < data.length; i++){
            intData[i] = data[i];
        }
        return communicationCard.send(intData, data.length);
    }
}


class TokenRing {
    private ArrayList<int[]> dataList = new ArrayList<>();
    public int[] receive(int size){
        //Simulates receiving data from the TOKEN-RING card.
        int[] solution = null;
        for(int[] dataSet: dataList){
            if(dataSet.length == size){
                solution = dataSet;
            }
        }
        //Logic to send data
        if(solution != null){
            int[] a = solution;
            dataList.remove(solution);
            return a;
        }else{
            return null;
        }
    }

    public int send(int[] data, int size){
        // Simulate sending data to the TOKEN-RING card
        // Logic to send data
        int[] sendData = new int[size]; //this method creates this array specifically for holding
        //the data to be sent.
        System.arraycopy(data, 0, sendData, 0, size); //to copy the data from input data
        // to the sendData array.
        dataList.add(sendData);
        return sendData.length;
    }

    public void setCom(byte[] bytes) {
    }
}


class Cpu {
    public void writeToMem(MemoryCardAdapter ram){
        int addr=0;
        ram.setMem("efhj".getBytes(), addr);
    }
    public byte[] readFromMem(MemoryCardAdapter ram){
        return new byte[10];
        //bu kod boşşş
    }
}




class Computer {
    RAM ram= new RAM();
    Ethernet ethernet=new Ethernet();
    TokenRing tokenRing=new TokenRing();


    Computer(){
        Cpu cpu1= new Cpu();
        Cpu cpu2=new Cpu();
        RAM ram= new RAM();
        Ethernet ethernet=new Ethernet();
        EthernetAdapter ethernetAdapter=new EthernetAdapter(ethernet);
        TokenRing tokenRing=new TokenRing();
        TokenAdapter tokenAdapter=new TokenAdapter(tokenRing);


    }

    int addr=0;
    int size=0;

    public void writeToCon(TokenAdapter t){
        tokenRing.setCom("ewasdf".getBytes());
    }
    public void readFrom(CommunicationCard communicationCard){
        communicationCard.getCom(size);
    }

    }
